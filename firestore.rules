
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an administrator
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection
    match /usuarios/{userId} {
      allow read: if request.auth.uid == userId || isAdmin();
      // User can create their own document if the document ID matches their UID
      allow create: if request.auth.uid == userId && request.resource.id == userId;
      // User can update their own data, or an admin can update any user
      allow update: if request.auth.uid == userId || isAdmin();
      // Deletion of user documents is typically restricted or handled by admin/specific functions
      // Example: allow delete: if isAdmin();
    }

    // Clients collection
    // Assumes 'clientes' has an 'owner' field with the user's UID
    match /clientes/{clienteId} {
      allow read, update, delete: if request.auth != null && (request.auth.uid == resource.data.owner || isAdmin());
      allow create: if request.auth != null && (request.auth.uid == request.resource.data.owner || isAdmin());
    }

    // Projects collection
    // Assumes 'projetos' has an 'owner' field with the user's UID
    match /projetos/{projetoId} {
      allow read, update, delete: if request.auth != null && (request.auth.uid == resource.data.owner || isAdmin());
      allow create: if request.auth != null && (request.auth.uid == request.resource.data.owner || isAdmin());
    }

    // Technical Sheets collection
    // Assumes 'fichasTecnicas' has an 'owner' field with the user's UID
    match /fichasTecnicas/{fichaId} {
      allow read, update, delete: if request.auth != null && (request.auth.uid == resource.data.owner || isAdmin());
      allow create: if request.auth != null && (request.auth.uid == request.resource.data.owner || isAdmin());
    }

    // Companies collection
    // Assumes the document ID in 'empresas' is the owner's UID
    match /empresas/{empresaOwnerId} {
      allow read, update, delete: if request.auth != null && (request.auth.uid == empresaOwnerId || isAdmin());
      allow create: if request.auth != null && (request.auth.uid == empresaOwnerId && request.resource.id == empresaOwnerId || isAdmin());
    }

    // Labels collection
    // Assumes 'etiquetas' has a 'createdBy' field with the user's UID
    match /etiquetas/{etiquetaId} {
      allow read, update, delete: if request.auth != null && (request.auth.uid == resource.data.createdBy || isAdmin());
      allow create: if request.auth != null && (request.auth.uid == request.resource.data.createdBy || isAdmin());
    }

    // Contracts collection
    match /contratos/{contractId} {
      // --- Helpers for contract data and request data ---
      function contractResource() {
        return resource.data;
      }
      function incomingContractData() {
        return request.resource.data;
      }
      function authedUserEmail() {
        return request.auth != null && request.auth.token != null ? request.auth.token.email : null;
      }

      // --- READ (GET) PERMISSIONS ---
      // Creator, Admin can read. Client and Witnesses can read if their authenticated email matches.
      allow get: if request.auth != null && (
                    request.auth.uid == contractResource().createdBy ||
                    isAdmin() ||
                    (contractResource().cliente != null && authedUserEmail() == contractResource().cliente.email) ||
                    (contractResource().testemunhas != null && contractResource().testemunhas[0] != null && authedUserEmail() == contractResource().testemunhas[0].email) ||
                    (contractResource().testemunhas != null && contractResource().testemunhas[1] != null && authedUserEmail() == contractResource().testemunhas[1].email)
                  );

      // --- CREATE PERMISSIONS ---
      // Only the creator (service provider) or an admin can create.
      allow create: if request.auth != null &&
                     (request.auth.uid == incomingContractData().createdBy || isAdmin());

      // --- DELETE PERMISSIONS ---
      allow delete: if request.auth != null &&
                      (request.auth.uid == contractResource().createdBy || isAdmin());

      // --- UPDATE PERMISSIONS ---
      allow update: if request.auth != null && (
                      // RULE 1: Creator/Admin can update general fields (but not directly overwrite signatures meant for others)
                      (
                        (request.auth.uid == contractResource().createdBy || isAdmin()) &&
                        // List of signature fields that creator/admin CANNOT directly overwrite
                        !( incomingContractData().diff(contractResource()).affectedKeys().hasAny([
                            'assinaturas.cliente', 'assinaturas.testemunha1', 'assinaturas.testemunha2', 'assinaturas.prestador'
                           ])
                        )
                      ) ||
                      // RULE 2: A signer (client, witness, provider) can update their own signature slot
                      // and related status fields.
                      (
                        // List of fields a signer IS ALLOWED to modify on the contract document:
                        // 'assinaturas' (only their own slot), 'status', 'dataUltimaModificacao', 'dataFinalizacaoAssinaturas'
                        keys(incomingContractData().diff(contractResource()).affectedKeys()).hasOnly(['assinaturas', 'status', 'dataUltimaModificacao', 'dataFinalizacaoAssinaturas']) &&
                        // Validate that the status transition is to a valid "signed" state
                        (incomingContractData().status == 'parcialmente_assinado' || incomingContractData().status == 'assinado') &&
                        (
                          // Client signing
                          ( contractResource().cliente != null && authedUserEmail() == contractResource().cliente.email &&
                            incomingContractData().assinaturas.cliente.dataHora == request.time &&
                            incomingContractData().assinaturas.cliente.nome == contractResource().cliente.nome &&
                            // Ensure only the client's signature field is being changed within 'assinaturas' map
                            (contractResource().assinaturas == null || keys(incomingContractData().assinaturas.diff(contractResource().assinaturas).affectedKeys()).hasOnly(['cliente'])) &&
                            (contractResource().assinaturas != null || keys(incomingContractData().assinaturas).hasOnly(['cliente'])) // Handles first signature in the map
                          ) ||
                          // Witness 1 signing
                          ( contractResource().testemunhas != null && contractResource().testemunhas[0] != null && authedUserEmail() == contractResource().testemunhas[0].email &&
                            incomingContractData().assinaturas.testemunha1.dataHora == request.time &&
                            incomingContractData().assinaturas.testemunha1.nome == contractResource().testemunhas[0].nome &&
                            (contractResource().assinaturas == null || keys(incomingContractData().assinaturas.diff(contractResource().assinaturas).affectedKeys()).hasOnly(['testemunha1'])) &&
                            (contractResource().assinaturas != null || keys(incomingContractData().assinaturas).hasOnly(['testemunha1']))
                          ) ||
                          // Witness 2 signing
                          ( contractResource().testemunhas != null && contractResource().testemunhas[1] != null && authedUserEmail() == contractResource().testemunhas[1].email &&
                            incomingContractData().assinaturas.testemunha2.dataHora == request.time &&
                            incomingContractData().assinaturas.testemunha2.nome == contractResource().testemunhas[1].nome &&
                            (contractResource().assinaturas == null || keys(incomingContractData().assinaturas.diff(contractResource().assinaturas).affectedKeys()).hasOnly(['testemunha2'])) &&
                            (contractResource().assinaturas != null || keys(incomingContractData().assinaturas).hasOnly(['testemunha2']))
                          ) ||
                          // Provider (creator) signing through this public flow
                          ( request.auth.uid == contractResource().createdBy && contractResource().empresaPrestador != null &&
                            incomingContractData().assinaturas.prestador.dataHora == request.time &&
                            incomingContractData().assinaturas.prestador.nome == contractResource().empresaPrestador.responsavelTecnico &&
                            (contractResource().assinaturas == null || keys(incomingContractData().assinaturas.diff(contractResource().assinaturas).affectedKeys()).hasOnly(['prestador'])) &&
                            (contractResource().assinaturas != null || keys(incomingContractData().assinaturas).hasOnly(['prestador']))
                          )
                        )
                      )
                    );
    } // End of match /contratos/{contractId}

    // Global Label Templates
    match /globalLabelTemplates/{templateId} {
      // Allow any authenticated user to read global templates
      allow read: if request.auth != null;
      // Only allow admins to create, update, or delete global templates
      allow write: if isAdmin();
    }

  } // End of match /databases/{database}/documents
} // End of service cloud.firestore

    