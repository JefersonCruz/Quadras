
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Regra padrão: Requer autenticação para qualquer acesso.
    // EM PRODUÇÃO: Refine essas regras para serem mais específicas!
    match /{document=**} {
      allow read, write: if request.auth != null;
    }

    // Exemplo para a coleção 'usuarios':
    // Permite que um usuário leia seu próprio documento.
    // Permite que um usuário crie seu próprio documento (ao se cadastrar).
    // Permite que um usuário atualize seu próprio documento.
    // Nega a exclusão por qualquer usuário (geralmente feito por admin ou functions).
    match /usuarios/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null; // Ou pode ser mais específico se o ID do documento DEVE ser o UID do usuário
      allow delete: if false; // Ou if get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }

    // Exemplo para a coleção 'empresas':
    // O 'owner' do documento da empresa (que é o userId) pode ler, criar e atualizar.
    match /empresas/{userId} {
      allow read, create, update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false; // Apenas admins ou functions podem deletar
    }

    // Exemplo para 'clientes':
    // Apenas o 'owner' (usuário que criou) pode gerenciar seus clientes.
    match /clientes/{clientId} {
      allow read, write: if request.auth != null && resource.data.owner == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.owner == request.auth.uid;
    }

    // Exemplo para 'projetos':
    // Apenas o 'owner' pode gerenciar seus projetos.
    match /projetos/{projetoId} {
      allow read, write: if request.auth != null && resource.data.owner == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.owner == request.auth.uid;
    }

    // Exemplo para 'etiquetas':
    // Apenas o 'createdBy' (usuário que criou) pode gerenciar suas etiquetas.
    match /etiquetas/{etiquetaId} {
      allow read, write: if request.auth != null && resource.data.createdBy == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;
    }

    // Exemplo para 'fichasTecnicas':
    // Apenas o 'owner' pode gerenciar suas fichas.
    match /fichasTecnicas/{fichaId} {
      allow read, write: if request.auth != null && resource.data.owner == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.owner == request.auth.uid;
    }
    
    // Exemplo para 'contratos':
    // O criador ('createdBy') pode gerenciar (ler, escrever, criar).
    // Assinantes (cliente, prestador, testemunhas) podem ler o contrato se estiverem envolvidos (lógica mais complexa, simplificada aqui).
    // Qualquer um pode ler um contrato público (se houver um campo `publico == true`, por exemplo).
    match /contratos/{contratoId} {
      allow read: if request.auth != null && 
                      (resource.data.createdBy == request.auth.uid ||
                       resource.data.cliente.email == request.auth.token.email ||
                       resource.data.empresaPrestador.email == request.auth.token.email ||
                       (resource.data.testemunhas[0] != null && resource.data.testemunhas[0].email == request.auth.token.email) ||
                       (resource.data.testemunhas[1] != null && resource.data.testemunhas[1].email == request.auth.token.email));
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth != null && resource.data.createdBy == request.auth.uid; // O criador pode atualizar
                      // Adicionar lógica para permitir que partes específicas atualizem seus campos de assinatura
                      // Ex: request.auth.token.email == resource.data.cliente.email && request.resource.data.assinaturas.cliente != resource.data.assinaturas.cliente

      allow delete: if false; // Normalmente, apenas admins ou functions deletam contratos.
    }

    // Coleção para templates globais de etiquetas (gerenciado por admin)
    match /globalLabelTemplates/{templateId} {
      allow read: if request.auth != null; // Todos autenticados podem ler os templates globais
      allow write: if request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }

    // Coleção para orçamentos
    match /orcamentos/{orcamentoId} {
      allow read, write: if request.auth != null && resource.data.createdBy == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;
    }

  }
}
