rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Função auxiliar para verificar se o usuário é um administrador
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }

    // Coleção de Usuários
    match /usuarios/{userId} {
      allow read: if request.auth.uid == userId || isAdmin();
      // Permite que o usuário crie seu próprio documento se o ID do documento corresponder ao seu UID
      allow create: if request.auth.uid == userId && request.resource.id == userId;
      // Permite que o usuário atualize seus próprios dados, ou um admin pode atualizar qualquer usuário
      allow update: if request.auth.uid == userId || isAdmin();
      // A exclusão de documentos de usuário geralmente é restrita ou tratada por admin/funções específicas
      // Exemplo: allow delete: if isAdmin();
    }

    // Coleção de Clientes
    // Assume que 'clientes' tem um campo 'owner' com o UID do usuário
    match /clientes/{clienteId} {
      allow read, update, delete: if request.auth != null && (request.auth.uid == resource.data.owner || isAdmin());
      allow create: if request.auth != null && (request.auth.uid == request.resource.data.owner || isAdmin());
    }

    // Coleção de Projetos
    // Assume que 'projetos' tem um campo 'owner' com o UID do usuário
    match /projetos/{projetoId} {
      allow read, update, delete: if request.auth != null && (request.auth.uid == resource.data.owner || isAdmin());
      allow create: if request.auth != null && (request.auth.uid == request.resource.data.owner || isAdmin());
    }

    // Coleção de Fichas Técnicas
    // Assume que 'fichasTecnicas' tem um campo 'owner' com o UID do usuário
    match /fichasTecnicas/{fichaId} {
      allow read, update, delete: if request.auth != null && (request.auth.uid == resource.data.owner || isAdmin());
      allow create: if request.auth != null && (request.auth.uid == request.resource.data.owner || isAdmin());
    }

    // Coleção de Empresas
    // Assume que o ID do documento na coleção 'empresas' é o UID do proprietário
    match /empresas/{empresaOwnerId} {
      allow read, update, delete: if request.auth != null && (request.auth.uid == empresaOwnerId || isAdmin());
      allow create: if request.auth != null && (request.auth.uid == empresaOwnerId && request.resource.id == empresaOwnerId || isAdmin());
    }

    // Coleção de Etiquetas
    // Assume que 'etiquetas' tem um campo 'createdBy' com o UID do usuário
    match /etiquetas/{etiquetaId} {
      allow read, update, delete: if request.auth != null && (request.auth.uid == resource.data.createdBy || isAdmin());
      allow create: if request.auth != null && (request.auth.uid == request.resource.data.createdBy || isAdmin());
    }

    // Coleção de Contratos
    match /contratos/{contractId} {
      // --- Helpers para dados do contrato e da requisição ---
      function contractResource() {
        return resource.data;
      }
      function incomingContractData() {
        return request.resource.data;
      }
      function authedUserEmail() {
        // Verifica se request.auth e request.auth.token existem antes de acessar o email
        return request.auth != null && request.auth.token != null ? request.auth.token.email : null;
      }

      // --- PERMISSÕES DE LEITURA (GET) ---
      // Criador, Admin podem ler. Cliente e Testemunhas podem ler se o email autenticado corresponder.
      allow get: if request.auth != null && (
                    request.auth.uid == contractResource().createdBy ||
                    isAdmin() ||
                    (contractResource().cliente != null && authedUserEmail() == contractResource().cliente.email) ||
                    (contractResource().testemunhas != null && contractResource().testemunhas[0] != null && authedUserEmail() == contractResource().testemunhas[0].email) ||
                    (contractResource().testemunhas != null && contractResource().testemunhas[1] != null && authedUserEmail() == contractResource().testemunhas[1].email)
                  );

      // --- PERMISSÕES DE CRIAÇÃO (CREATE) ---
      // Somente o criador (prestador) ou admin podem criar.
      allow create: if request.auth != null &&
                     (request.auth.uid == incomingContractData().createdBy || isAdmin());

      // --- PERMISSÕES DE EXCLUSÃO (DELETE) ---
      allow delete: if request.auth != null &&
                      (request.auth.uid == contractResource().createdBy || isAdmin());

      // --- PERMISSÕES DE ATUALIZAÇÃO (UPDATE) ---
      allow update: if request.auth != null && (
                      // REGRA 1: Criador/Admin pode atualizar campos gerais (exceto sobrescrever assinaturas de outros)
                      (
                        (request.auth.uid == contractResource().createdBy || isAdmin()) &&
                        // Lista de campos que NÃO podem ser sobrescritos diretamente pelo criador/admin (são definidos pelos signatários)
                        !( incomingContractData().diff(contractResource()).affectedKeys().hasAny([
                            'assinaturas.cliente', 'assinaturas.testemunha1', 'assinaturas.testemunha2', 'assinaturas.prestador'
                           ])
                        )
                      ) ||
                      // REGRA 2: Um signatário (cliente, testemunha, prestador) pode atualizar seu próprio slot de assinatura
                      // e os campos de status relacionados.
                      (
                        // Lista de campos que um signatário PODE modificar no documento do contrato:
                        // 'assinaturas' (o seu próprio slot), 'status', 'dataUltimaModificacao', 'dataFinalizacaoAssinaturas'
                        incomingContractData().diff(contractResource()).affectedKeys().hasOnly(['assinaturas', 'status', 'dataUltimaModificacao', 'dataFinalizacaoAssinaturas']) &&
                        // Verifica se o status está em uma transição válida
                        (incomingContractData().status == 'parcialmente_assinado' || incomingContractData().status == 'assinado') &&
                        (
                          // Cliente assinando
                          ( contractResource().cliente != null && authedUserEmail() == contractResource().cliente.email &&
                            incomingContractData().assinaturas.cliente.dataHora == request.time &&
                            incomingContractData().assinaturas.cliente.nome == contractResource().cliente.nome &&
                            (contractResource().assinaturas == null || incomingContractData().assinaturas.diff(contractResource().assinaturas).affectedKeys().hasOnly(['cliente'])) &&
                            (contractResource().assinaturas != null || incomingContractData().assinaturas.keys().hasOnly(['cliente'])) // Para a primeira assinatura no mapa
                          ) ||
                          // Testemunha 1 assinando
                          ( contractResource().testemunhas != null && contractResource().testemunhas[0] != null && authedUserEmail() == contractResource().testemunhas[0].email &&
                            incomingContractData().assinaturas.testemunha1.dataHora == request.time &&
                            incomingContractData().assinaturas.testemunha1.nome == contractResource().testemunhas[0].nome &&
                            (contractResource().assinaturas == null || incomingContractData().assinaturas.diff(contractResource().assinaturas).affectedKeys().hasOnly(['testemunha1'])) &&
                            (contractResource().assinaturas != null || incomingContractData().assinaturas.keys().hasOnly(['testemunha1']))
                          ) ||
                          // Testemunha 2 assinando
                          ( contractResource().testemunhas != null && contractResource().testemunhas[1] != null && authedUserEmail() == contractResource().testemunhas[1].email &&
                            incomingContractData().assinaturas.testemunha2.dataHora == request.time &&
                            incomingContractData().assinaturas.testemunha2.nome == contractResource().testemunhas[1].nome &&
                            (contractResource().assinaturas == null || incomingContractData().assinaturas.diff(contractResource().assinaturas).affectedKeys().hasOnly(['testemunha2'])) &&
                            (contractResource().assinaturas != null || incomingContractData().assinaturas.keys().hasOnly(['testemunha2']))
                          ) ||
                          // Prestador (criador) assinando via este fluxo
                          ( request.auth.uid == contractResource().createdBy && contractResource().empresaPrestador != null && // Garante que empresaPrestador exista
                            incomingContractData().assinaturas.prestador.dataHora == request.time &&
                            incomingContractData().assinaturas.prestador.nome == contractResource().empresaPrestador.responsavelTecnico &&
                            (contractResource().assinaturas == null || incomingContractData().assinaturas.diff(contractResource().assinaturas).affectedKeys().hasOnly(['prestador'])) &&
                            (contractResource().assinaturas != null || incomingContractData().assinaturas.keys().hasOnly(['prestador']))
                          )
                        )
                      )
                    );
    } // Fim do match /contratos/{contractId}

    // Coleção de Orçamentos
    match /orcamentos/{orcamentoId} {
      allow read, update, delete: if request.auth != null && (request.auth.uid == resource.data.createdBy || isAdmin());
      allow create: if request.auth != null && (request.auth.uid == request.resource.data.createdBy || isAdmin());
    }

    // Global Templates (exemplo, não usado atualmente mas bom para estrutura)
    // Renomeado para globalLabelTemplates para corresponder à coleção usada no admin panel
    match /globalLabelTemplates/{templateId} {
      allow read: if request.auth != null; // Todos os usuários autenticados podem ler
      allow write: if isAdmin();           // Apenas admins podem escrever
    }

  } // Fim do match /databases/{database}/documents
} // Fim do service cloud.firestore
